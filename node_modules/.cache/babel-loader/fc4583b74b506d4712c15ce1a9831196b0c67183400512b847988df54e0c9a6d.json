{"ast":null,"code":"var _jsxFileName = \"/Users/eva/Documents/react/pantheonlab/my-app/src/ScenePlayer.js\",\n  _s = $RefreshSig$();\n/*import React, { useEffect, useRef, useState } from 'react';\n\n\nconst ScenePlayer = () => {\n    const canvasRef = useRef(null);\n    const videoRef = useRef(null);\n    const [currentScene, setCurrentScene] = useState(0);\n    const [timeElapsed, setTimeElapsed] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isTextVisible, setIsTextVisible] = useState(true);\n\n    const scenes = [\n        {\n            index: 0,\n            sentence: \"This is a simple Javascript test\",\n            textPosition: { x: 640, y: 360 }, // Center\n            textAnimation: \"typing\",\n            media: \"https://miro.medium.com/max/1024/1*OK8xc3Ic6EGYg2k6BeGabg.jpeg\", // Yellow background\n            duration: 3,\n        },\n        {\n            index: 1,\n            sentence: \"Here comes the video!\",\n            textPosition: { x: 960, y: 100 }, // Top-right\n            textAnimation: \"blink\",\n            media: \"https://www.w3schools.com/html/mov_bbb.mp4\", // Replace with a working video URL\n            duration: 5,\n        },\n    ];\n\n    useEffect(() => {\n        const ctx = canvasRef.current.getContext('2d');\n        const interval = setInterval(() => {\n            setTimeElapsed(prevTime => prevTime + 0.1);\n            if (timeElapsed >= scenes[currentScene].duration) {\n                setCurrentScene(prevScene => (prevScene + 1) % scenes.length);\n                setTimeElapsed(0);\n                // Stop video when scene changes\n                if (videoRef.current) videoRef.current.pause();\n            }\n            drawScene(ctx);\n    \n            // Add this block here:\n            if (currentScene === 1 && isPlaying && videoRef.current) {\n                videoRef.current.play().catch(error => {\n                    console.error(\"Error playing video:\", error);\n                    setIsPlaying(false); // Set isPlaying to false if playback fails\n                });\n            }\n        }, 100);\n        return () => clearInterval(interval);\n    }, [timeElapsed, currentScene, isPlaying]); // isPlaying added to dependencies\n\n\n    useEffect(() => {\n        let blinkInterval;\n        if (scenes[currentScene].textAnimation === \"blink\") {\n            blinkInterval = setInterval(() => {\n                setIsTextVisible(prev => !prev);\n            }, 500);\n        } else {\n            setIsTextVisible(true);\n        }\n        return () => clearInterval(blinkInterval);\n    }, [currentScene]);\n\n    const drawScene = (ctx) => {\n        const scene = scenes[currentScene];\n        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n        if (scene.media.startsWith('http')) { // Handle image\n            const img = new Image();\n            img.onload = () => {\n                ctx.drawImage(img, 0, 0, canvasRef.current.width, canvasRef.current.height);\n                drawText(ctx, scene.sentence, scene.textPosition.x, scene.textPosition.y);\n            };\n            img.src = scene.media;\n        } else { // Handle video (light gray background)\n            ctx.fillStyle = 'lightgray';\n            ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n            drawText(ctx, scene.sentence, scene.textPosition.x, scene.textPosition.y);\n        }\n    };\n\n    const drawText = (ctx, text, x, y) => {\n        if (scenes[currentScene].textAnimation === \"blink\" && !isTextVisible) return;\n        ctx.fillStyle = 'black';\n        ctx.font = '30px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(text, x, y);\n    };\n\n    const handleCanvasClick = () => {\n        if (currentScene === 1) {\n            if (isPlaying) {\n                setIsPlaying(false);\n                videoRef.current.pause();\n            } else {\n                setIsPlaying(true);\n                videoRef.current.play().catch(error => console.error('Error playing video:', error));\n            }\n        }\n    };\n\n    return (\n        <div>\n            <canvas\n                ref={canvasRef}\n                width={1280}\n                height={720}\n                onClick={handleCanvasClick}\n                style={{ cursor: 'pointer', backgroundColor: '#f0f0f0' }}\n            />\n            <video\n                ref={videoRef}\n                src={scenes[1].media} // Corrected video src\n                style={{ display: 'none' }}\n                onEnded={() => setIsPlaying(false)}\n                muted\n            />\n        </div>\n    );\n};\n\nexport default ScenePlayer;*/\nimport React, { useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleVideoPlayer = () => {\n  _s();\n  const videoRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      src: \"/VID.mp4\",\n      controls: true,\n      autoPlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleVideoPlayer, \"0CLVWOVx+8g0ODBjgEMJWUwEryM=\");\n_c = SimpleVideoPlayer;\nexport default SimpleVideoPlayer;\nvar _c;\n$RefreshReg$(_c, \"SimpleVideoPlayer\");","map":{"version":3,"names":["React","useRef","jsxDEV","_jsxDEV","SimpleVideoPlayer","_s","videoRef","children","ref","src","controls","autoPlay","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/eva/Documents/react/pantheonlab/my-app/src/ScenePlayer.js"],"sourcesContent":["/*import React, { useEffect, useRef, useState } from 'react';\n\n\nconst ScenePlayer = () => {\n    const canvasRef = useRef(null);\n    const videoRef = useRef(null);\n    const [currentScene, setCurrentScene] = useState(0);\n    const [timeElapsed, setTimeElapsed] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isTextVisible, setIsTextVisible] = useState(true);\n\n    const scenes = [\n        {\n            index: 0,\n            sentence: \"This is a simple Javascript test\",\n            textPosition: { x: 640, y: 360 }, // Center\n            textAnimation: \"typing\",\n            media: \"https://miro.medium.com/max/1024/1*OK8xc3Ic6EGYg2k6BeGabg.jpeg\", // Yellow background\n            duration: 3,\n        },\n        {\n            index: 1,\n            sentence: \"Here comes the video!\",\n            textPosition: { x: 960, y: 100 }, // Top-right\n            textAnimation: \"blink\",\n            media: \"https://www.w3schools.com/html/mov_bbb.mp4\", // Replace with a working video URL\n            duration: 5,\n        },\n    ];\n\n    useEffect(() => {\n        const ctx = canvasRef.current.getContext('2d');\n        const interval = setInterval(() => {\n            setTimeElapsed(prevTime => prevTime + 0.1);\n            if (timeElapsed >= scenes[currentScene].duration) {\n                setCurrentScene(prevScene => (prevScene + 1) % scenes.length);\n                setTimeElapsed(0);\n                // Stop video when scene changes\n                if (videoRef.current) videoRef.current.pause();\n            }\n            drawScene(ctx);\n    \n            // Add this block here:\n            if (currentScene === 1 && isPlaying && videoRef.current) {\n                videoRef.current.play().catch(error => {\n                    console.error(\"Error playing video:\", error);\n                    setIsPlaying(false); // Set isPlaying to false if playback fails\n                });\n            }\n        }, 100);\n        return () => clearInterval(interval);\n    }, [timeElapsed, currentScene, isPlaying]); // isPlaying added to dependencies\n\n\n    useEffect(() => {\n        let blinkInterval;\n        if (scenes[currentScene].textAnimation === \"blink\") {\n            blinkInterval = setInterval(() => {\n                setIsTextVisible(prev => !prev);\n            }, 500);\n        } else {\n            setIsTextVisible(true);\n        }\n        return () => clearInterval(blinkInterval);\n    }, [currentScene]);\n\n    const drawScene = (ctx) => {\n        const scene = scenes[currentScene];\n        ctx.clearRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n\n        if (scene.media.startsWith('http')) { // Handle image\n            const img = new Image();\n            img.onload = () => {\n                ctx.drawImage(img, 0, 0, canvasRef.current.width, canvasRef.current.height);\n                drawText(ctx, scene.sentence, scene.textPosition.x, scene.textPosition.y);\n            };\n            img.src = scene.media;\n        } else { // Handle video (light gray background)\n            ctx.fillStyle = 'lightgray';\n            ctx.fillRect(0, 0, canvasRef.current.width, canvasRef.current.height);\n            drawText(ctx, scene.sentence, scene.textPosition.x, scene.textPosition.y);\n        }\n    };\n\n    const drawText = (ctx, text, x, y) => {\n        if (scenes[currentScene].textAnimation === \"blink\" && !isTextVisible) return;\n        ctx.fillStyle = 'black';\n        ctx.font = '30px Arial';\n        ctx.textAlign = 'center';\n        ctx.fillText(text, x, y);\n    };\n\n    const handleCanvasClick = () => {\n        if (currentScene === 1) {\n            if (isPlaying) {\n                setIsPlaying(false);\n                videoRef.current.pause();\n            } else {\n                setIsPlaying(true);\n                videoRef.current.play().catch(error => console.error('Error playing video:', error));\n            }\n        }\n    };\n\n    return (\n        <div>\n            <canvas\n                ref={canvasRef}\n                width={1280}\n                height={720}\n                onClick={handleCanvasClick}\n                style={{ cursor: 'pointer', backgroundColor: '#f0f0f0' }}\n            />\n            <video\n                ref={videoRef}\n                src={scenes[1].media} // Corrected video src\n                style={{ display: 'none' }}\n                onEnded={() => setIsPlaying(false)}\n                muted\n            />\n        </div>\n    );\n};\n\nexport default ScenePlayer;*/\nimport React, { useRef } from 'react';\n\nconst SimpleVideoPlayer = () => {\n  const videoRef = useRef(null);\n\n  return (\n    <div>\n      <video ref={videoRef} src=\"/VID.mp4\" controls autoPlay />\n    </div>\n  );\n};\n\nexport default SimpleVideoPlayer;"],"mappingstC,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC9B,MAAMC,QAAQ,GAAGL,MAAM,CAAC,IAAI,CAAC;EAE7B,oBACEE,OAAA;IAAAI,QAAA,eACEJ,OAAA;MAAOK,GAAG,EAAEF,QAAS;MAACG,GAAG,EAAC,UAAU;MAACC,QAAQ;MAACC,QAAQ;IAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACtD,CAAC;AAEV,CAAC;AAACV,EAAA,CARID,iBAAiB;AAAAY,EAAA,GAAjBZ,iBAAiB;AAUvB,eAAeA,iBAAiB;AAAC,IAAAY,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}